import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import pytz
import random
import logging

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHER_TOKEN = os.getenv("OPENWEATHER_TOKEN")

USERS = [
    {"chat_id": 123456789, "name": "–í–∏—Ç—è", "city": "Warsaw", "timezone": "Europe/Warsaw", "role": "admin"},
    {"chat_id": 987654321, "name": "–ñ–µ–Ω—è", "city": "Warsaw", "timezone": "Europe/Warsaw", "role": "user"},
    {"chat_id": 111222333, "name": "–†–æ–º–∞", "city": "Rivne", "timezone": "Europe/Kyiv", "role": "user"},
    {"chat_id": 444555666, "name": "–í–∏—Ç–µ–∫", "city": "Kelowna", "timezone": "America/Vancouver", "role": "user"},
    {"chat_id": 777888999, "name": "–ù–∏–∫–∏—Ç–∞", "city": "Warsaw", "timezone": "Europe/Warsaw", "role": "user"},
]

PREDICTIONS = [
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ —É–ª—ã–±–Ω—ë—Ç—Å—è —É–¥–∞—á–∞!",
    "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –≤ –ø—É—Ç–∏.",
    "–ñ–¥–∏ —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤–µ—á–µ—Ä–æ–º.",
    "–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!"
]

def get_weather(city: str) -> str:
    return f"–ü–æ–≥–æ–¥–∞ –≤ {city}: +20¬∞C, –æ–±–ª–∞—á–Ω–æ"

def main_admin_keyboard():
    keyboard = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–∏"), KeyboardButton("üöó –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")],
        [KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton("üîÅ –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞")],
        [KeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("üìö –õ–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")],
        [KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
    ]
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        is_persistent=True,
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = next((u for u in USERS if u["chat_id"] == user_id), None)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç {user_id}")

    if user:
        text = f"–ü—Ä–∏–≤–µ—Ç, {user['name']}!"
        reply_markup = main_admin_keyboard() if user["role"] == "admin" else None
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à chat_id: `{update.effective_user.id}`", parse_mode="Markdown")

async def log_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.first_name}): {update.message.text}")

async def send_weather(application):
    now_utc = datetime.now(pytz.utc)
    for user in USERS:
        try:
            if not user.get("chat_id"):
                continue
            local_tz = pytz.timezone(user["timezone"])
            local_now = now_utc.astimezone(local_tz)
            if local_now.hour != 7 or local_now.minute > 10:
                continue
            message = f"{get_weather(user['city'])}\n–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {random.choice(PREDICTIONS)}"
            await application.bot.send_message(chat_id=user["chat_id"], text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {user['name']}: {e}")

async def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("id", get_id))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_all_messages))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(send_weather(application)), "interval", minutes=10)
    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
